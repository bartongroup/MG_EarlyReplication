---
title: "The location and development of Replicon Cluster Domains in early replicating DNA"
subtitle: "Revision proposal"
author:
  - name: Marek Gierlinski
    affiliations: Data Analysis Group
    note: "Creator of this report"
date: today
date-format: "D MMMM YYYY"
execute:
  echo: false
  cache: true
  warning: false
format:
  html:
    theme:
      - journal
      - report.scss
    toc: true
editor: source
self-contained: true
---

```{r libraries, cache=FALSE, include=FALSE}
suppressPackageStartupMessages({
  library(targets)
  library(tidyverse)
  library(gt)
  library(cowplot)
})

tar_config_set(store = "../../_targets")
```

# TADs

TADs were taken from [Kang et al. 2020](http://genesdev.cshlp.org/content/34/13-14/913.full). HiC data for U2OS cells were downloaded as `.hic` files, which are binary files with HiC contact maps. Out of two replicates, a stronger, less noisy replicate 1 was selected. Time point of 360 min was selected. The files were accessed from [NCBI Gene Expression Omnibus](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSM4194463).

For processing and TAD detection [HiCExplorer](https://hicexplorer.readthedocs.io/en/latest/index.html) was used. First, `.hic` file was converted into `cool` format:

```         
hicConvertFormat -m {input} -o {output} --inputFormat=hic --outputFormat=cool
```

This command made a `.mcool` file with multiple resolutions. 50,000 bp was picked as it matches resolution in our data. The tool developer recommendations were followed, and the balance matrix was created:

```         
hicCorrectMatrix correct -m {input}::/resolutions/50000 -o {output} --filterThreshold -1.5 5
```

The thresholds were selected by inspecting the diagnostic plot as in the tutorial. Finally, TADs were detected at the FDR threshold of 0.01:

```         
hicFindTADs -m {input} --minDepth 150000 --maxDepth 500000 --step 50000 --thresholdComparisons 0.01  --outPrefix {file.prefix} --correctForMultipleTesting fdr
```

`r tar_read(n_pft)` auto-isolated peaks were compared to the TADs. @fig-tads illustrates the association with all isolated peaks and the TADs.

```{r}
#| label: fig-tads
#| fig-cap: Alignment of manually selected peaks (marked with black lines) and TADs (marked with yellow/blue segments). The histograms show normalised counts at 100-130 time points. The numbers in plots show the association score (see text).
#| fig-width: 8
#| fig-height: 20
tar_read(fig_tads) 
```

Statistical analysis of the association between peak-TAD was performed using bootstrap estimation. The coverage of the TAD by the peak and the coverage of the peak by the TAD were calculated for each overlapping peak-TAD pair. These coverage values, which fall between 0 and 1, were multiplied to produce the overlap score. The highest overlap score from all overlapping TADs was then identified for each peak, creating the association score. It should be noted that our scoring system is designed to favor situations where peak-TAD alignment is tight, and the sizes of the regions are comparable.

Once this method of calculating the strength of association for each peak had been established, a bootstrap analysis was performed. The distribution of TAD lengths was extracted from the data, with any TADs exceeding 2 MB in length being excluded. These longer TADs, which often span centromeric gaps, have low coverage by considerably shorter peaks despite possible overlap. Coverage of all chromosomes with TADs, randomly drawn from the length distribution, was generated during each bootstrap iteration. Association scores were then calculated against these randomly distributed TADs for each peak.

This bootstrap process was repeated 1000 times, with a cut-off quantile being determined for each peak's score against the random distribution of scores, which served as the p-value. The Benjamini-Hochberg method was utilized to correct these p-values for multiple tests.

Despite some peaks reaching high association scores with overlapping TADs, none of these scores was found to be statistically significant at a 0.05 false discovery rate (FDR) level.

# Peak width increase

`r tar_read(n_pg)` isolated peaks have been identified in our manuscript. The width of each peak has been estimated using either wavelet analysis or Gaussian curve fitting. @fig-pg-sel-growth shows a few examples of peak width.

```{r}
#| label: fig-pg-sel-growth
#| fig-cap: Random selection of isolated peak width, estimated by either wavelet analysis or Gaussian curve fitting.
#| fig-width: 8
#| fig-height: 8
tar_read(fig_pg_sel_growth) 
```

The analysis of peak width data was conducted in two distinct manners. Initially, a linear regression was applied to the four time points for each peak and measurement method. Although the linear fit might not accurately represent peak growth in certain instances (particularly where there is an abrupt increase in width over a single time point), it does serve as an approximation of growth across the entire time range, as illustrated in @{fig-pg-growth}A.

Subsequently, a gradient was calculated between two consecutive time points. This gradient depicts the incremental growth of the peak from one time point to the next, as shown in @{fig-pg-growth}B. Should there be no growth, the expected gradient would be zero. The t-test results against the null hypothesis of zero, performed for three gradients for each method, are presented in @tbl-pg-test.

It is noteworthy that the growth of peaks from the 40-70 minute mark is statistically significant, with a rate reaching up to 2-3 kb/min.

```{r}
#| label: fig-pg-growth
#| fig-cap: Illustration of peak width growth for all isolated peaks, measured by wavelet analysis or Gaussian curve fitting. A. The slope of a linear fit to four time points. The peaks are ordered according to their chromosomal positions and the colour indicates chromosomes. B. The gradient between adjacent time points. The gradient is calculated as the difference between the peak widths divided by the time separation between the adjacent time points (30 min) and it represents the peak growth speed. The black points with error bars represent the mean with its 95% confidence intervals.
#| fig-width: 8
#| fig-height: 6
tar_read(fig_pg_growth) 
```

```{r}
#| label: tbl-pg-test
#| tbl-cap: Results of a one sample t-test against zero for gradients.
tar_read(pg_lm_grad) |> 
  pluck("grad_test") |> 
  select(method = type, midpoint, mean_growth = estimate, CI_lo = conf.low, CI_up = conf.high, p_value = p.adj) |> 
  group_by(method) |> 
  gt() |> 
  fmt_number(c(mean_growth, CI_lo, CI_up), n_sigfig = 2) |> 
  fmt_number(p_value, rows = p_value >= 0.001,  n_sigfig = 2) |> 
  fmt_scientific(p_value, rows = p_value < 0.001,  decimals = 1) 
```

# Valley filling

A data for `r tar_read(n_vf)` valleys, including the mean and minumum signal, have been collected. @fig-vf-sel-filling shows a few example of valley signal time courses.

```{r}
#| label: fig-vf-sel-filling
#| fig-cap: Random selection of valley filling signal.
#| fig-width: 8
#| fig-height: 8
tar_read(fig_vf_sel_filling) 
```

Valley filling data were analysed in the same way as the peak width data, and the results are shown in @fig-vf-filling and @tbl-vf-test. There is a statistically significant increase in valley filling across all time points.

```{r}
#| label: fig-vf-filling
#| fig-cap: Illustration of valley filling, quantified by the mean and minimum valley signal. A. The slope of a linear fit to four time points. The peaks are ordered according to their chromosomal positions and the colour indicates chromosomes. B. The gradient between adjacent time points. The gradient is calculated as the difference between the valley signal divided by the time separation between the adjacent time points (30 min) and it represents the valley filling speed. The black points with error bars represent the mean with its 95% confidence intervals.
#| fig-width: 8
#| fig-height: 6
tar_read(fig_vf_filling) 
```

```{r}
#| label: tbl-vf-test
#| tbl-cap: Results of a one sample t-test against zero for valley filling.
tar_read(vf_lm_grad) |> 
  pluck("grad_test") |> 
  select(method = type, midpoint, mean_filling_rate = estimate, CI_lo = conf.low, CI_up = conf.high, p_value = p.adj) |> 
  group_by(method) |> 
  gt() |> 
  fmt_number(c(mean_filling_rate, CI_lo, CI_up), n_sigfig = 2) |> 
  fmt_number(p_value, rows = p_value >= 0.001,  n_sigfig = 2) |> 
  fmt_scientific(p_value, rows = p_value < 0.001,  decimals = 1) 
```

# Peak activation order

Adjacent height similarity (AHS) were calculated for `r tar_read(n_aps)` groups of peaks in this manuscript. @fig-aps shows their summary.

```{r}
#| label: fig-aps
#| fig-cap: Adjacent peak similarity across time points
#| fig-width: 6
#| fig-height: 4
tar_read(fig_aps) 
```

The change in AHS between time points was assessed with repeated measures ANOVA (an extension of paired t-test), taking into account repeated measurements of the same peak at different time points. The results, shown in @tbl-aps-test, indicate no detected difference in AHS between time points.

```{r}
#| label: tbl-aps-test
#| tbl-cap: Results of repeated measures ANOVA for adjacent height similarity across four time points. 'Within' section contains the result for AHS versus time point.
tar_read(aps_test) |> 
  gt() |> 
  fmt_number(c(sumsq, meansq, statistic, p.value), n_sigfig = 2) |> 
  sub_missing(c(statistic, p.value), missing_text = "")
```

# Conclusions

1.  There is no significant association between isolated peaks and TADs.

2.  Isolated peaks grow in width at later stages (> 70 min) at increasing rates ~0.4 - 3 kb / min.

3.  There is a statistically significant increase in valley filling at later time points.

4.  There is no statistically significant difference in adjacent height similarity between time all time points.

# Code

The R code used to create this document is available at [GitHub](https://github.com/bartongroup/MG_EarlyReplication/tree/main/revision).

# Session info

```{r}
#| label: session-info
#| cache: false
si <- targets::tar_read(session_info)
si$loadedOnly <- NULL
si
```
